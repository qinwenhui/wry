<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>wry</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <!-- 加载spring容器,就是加载spring的xml配置文件，使用通配符的方式加载多个配置文件 -->
  <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/classes/spring/applicationContext.xml</param-value>
  </context-param>
  <!-- 配置加载spring xml的监听器 -->
  <listener>
      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <!-- 配置服务器根目录监听，用于上传下载文件提供目录路径 -->
  <context-param>
      <param-name>webAppRootKey</param-name>
      <param-value>wry.webapp</param-value>
  </context-param>
  <listener>
      <listener-class>org.springframework.web.util.WebAppRootListener</listener-class>
  </listener>
  
    <!-- springmvc前端控制器sevlet -->
  <servlet>
      <servlet-name>springmvc</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器，适配器等等） -->
      <init-param>
          <param-name>contextConfigLocation</param-name>
          <param-value>classpath:springmvc.xml</param-value>
      </init-param>
  </servlet>
  <servlet-mapping>
      <servlet-name>springmvc</servlet-name>
      <!-- 
      	第一种：*.action,访问以.action结尾的由DispatcherServlet解析
      	第二种：/,所有访问的地址都由DispatcherSevlet解析，
      		对于静态文件的解析我们需要配置不让DispatcherServlet解析，使用此种方法可以实现RESful风格的url
       -->
      <url-pattern>*.action</url-pattern>
  </servlet-mapping>
  
    <!-- post乱码过滤器 -->
  <filter>
      <filter-name>CharacterEncodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <init-param>
          <param-name>encoding</param-name>
          <param-value>utf-8</param-value>
      </init-param>
  </filter>
  <filter-mapping>
      <filter-name>CharacterEncodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
  </filter-mapping>
  
</web-app>